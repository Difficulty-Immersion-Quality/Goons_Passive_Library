-- ==================================== Is Karlach cooking? ====================================

function Goon_IsKarlachCooking(entity)
    entity = entity or context.Source
    return Tagged('REALLY_KARLACH', entity) & not Tagged('KARLACH_CAN_TOUCH', entity) | Tagged('REALLY_KARLACH', entity) & HasAnyStatus({'ORI_KARLACH_INFERNAL_FURY','ORI_KARLACH_ENRAGE'}, {}, {}, entity)
end

-- ==================================== Fetch character levels ====================================

function GoonCharacterLevelEqualTo(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level == value)
end

function GoonCharacterLevelEqualToOrGreaterThan(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level >= value)
end

-- ==================================== Check current duration of status ====================================

function Goon_StatusGroupDurationEqualTo(entity, stringStatusGroupName, number)
    local entity = entity or context.Target
    local number = number or 0
    return ConditionResult(math.floor(GetStatusDuration(stringStatusGroupName, entity)) == number)
end

-- ==================================== Spell batching ====================================
-- TODO: Hunt down everything relevant.

function Goon_IsBardicInspirationSpell(entity)
    entity = entity or context.Source
    return SpellId('Target_BardicInspiration') | SpellId('Target_BardicInspiration_Combat') | SpellId('Target_MantleOfInspiration') | SpellId('Target_MantleOfInspiration_2') | SpellId('Target_MantleOfInspiration_3')
end

-- ==================================== Weapon enchant checks ====================================
-- TODO: Hunt down everything relevant.
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsIntelligenceModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source)))

function Goon_IsSpellcastingModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'MAG_MELEE_CASTER_BOON','LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON'}, {}, {}, entity)
end

function Goon_IsIntelligenceModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({}, {}, {}, entity)
end

function Goon_IsWisdomModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SHILLELAGH','FourEle_Attuned'}, {}, {}, entity)
end

function Goon_IsCharismaModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'HEXBLADE_BIND','PACT_BLADE'}, {}, {}, entity)
end

-- ==================================== Druid and Polymorph stuff ====================================
-- TODO: Hunt down everything relevant.
-- Check for any and all druid forms, only druid forms and not stinky disguise self etc. 
-- Includes support for Circle of Storm Chasers, the old (pre-toolkit) Circle of Stars.

function Goon_IsDruidWildshapeOrStatus(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Polymorph_BeastShape','WILDSHAPE_STARRY_ARCHER_PLAYER','WILDSHAPE_STARRY_CHALICE_PLAYER','WILDSHAPE_STARRY_DRAGON_PLAYER','STARRY_FORM_ARCHER','STARRY_FORM_CHALICE','STARRY_FORM_DRAGON','STORM_SHIFTER'}, {}, {}, entity) | HasStatus('SG_Polymorph', entity, context.Source) & Tagged('MYRMIDON_FIRE', entity) or Tagged('MYRMIDON_WATER', entity) or Tagged('MYRMIDON_AIR', entity) or Tagged('MYRMIDON_EARTH', entity)
end

function Goon_IsDruidWildshape(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Polymorph_BeastShape'}, {}, {}, entity) | HasStatus('SG_Polymorph', entity, context.Source) & Tagged('MYRMIDON_FIRE', entity) or Tagged('MYRMIDON_WATER', entity) or Tagged('MYRMIDON_AIR', entity) or Tagged('MYRMIDON_EARTH', entity)
end

function Goon_IsUnrestrictedPolymorphStatus(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Disguise','SG_Doppelganger','WILDSHAPE_STARRY_ARCHER_PLAYER','WILDSHAPE_STARRY_CHALICE_PLAYER','WILDSHAPE_STARRY_DRAGON_PLAYER','STARRY_FORM_ARCHER','STARRY_FORM_CHALICE','STARRY_FORM_DRAGON','STORM_SHIFTER'}, {}, {}, entity) | HasStatus('SG_Polymorph', entity, context.Source) | Tagged('MINDFLAYER', entity)
end

-- TODO: Need to sort out Immutable Form so it doesn't block non-hostile Polymorphs
function Goon_IsNonHostilePolymorphStatus(entity)
    entity = entity or context.Source
    return not Tagged('POLYMORPHED_UNWILLING', entity) & HasAnyStatus({'SG_Disguise','SG_Doppelganger','SG_Polymorph_BeastShape','WILDSHAPE_STARRY_ARCHER_PLAYER','WILDSHAPE_STARRY_CHALICE_PLAYER','WILDSHAPE_STARRY_DRAGON_PLAYER','STARRY_FORM_ARCHER','STARRY_FORM_CHALICE','STARRY_FORM_DRAGON','STORM_SHIFTER'}, {}, {}, entity) | not Tagged('POLYMORPHED_UNWILLING', entity) & HasStatus('SG_Polymorph', entity, context.Source) & Tagged('MYRMIDON_FIRE', entity) or Tagged('MYRMIDON_WATER', entity) or Tagged('MYRMIDON_AIR', entity) or Tagged('MYRMIDON_EARTH', entity) | not Tagged('POLYMORPHED_UNWILLING', entity) & Tagged('MINDFLAYER', entity)
end