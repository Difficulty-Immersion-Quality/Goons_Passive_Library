-- ==================================== VANILLA OVERWRITES ====================================

-- Add more technicals from entries using this function to negate niche, yet redundant saving throws from occuring
function WallOfFireCheck(ability, dc, result)
    result = result or false
    hasStatus =  HasAnyStatus({'WALLOFFIRE_DAMAGE_RECEIVED', 'WALLOFFIRE_DAMAGE_RECEIVED_5', 'WALLOFFIRE_DAMAGE_RECEIVED_6', 'WALLOFFIRE_DAMAGE_RECEIVED_7', 'WALLOFFIRE_DAMAGE_RECEIVED_8', 'WALLOFFIRE_DAMAGE_RECEIVED_9','MYSTIC_WALLOFREPULSION_EFFECT_RECEIVED',}, {}, {}, entity)
    if not hasStatus.Result then
        st = ~SavingThrow(ability, dc)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(result)
end

-- TODO: Test attacking bodies and shit. If that's triggering it, try 'not dead', maybe the function will fire before they are considered dead.
-- Added what appears to be a common solution for making the function more predictably fire
function IsKillingBlow()
    return HasDamageEffectFlag(DamageFlags.KillingBlow) | HasHPLessThan(1)
end

-- ==================================== STATUS GROUPINGS ====================================

-- ==================================== Bleeding

function Goon_HasBleedingCondition()
    return HasAnyStatus({'BLEEDING', 'BARBED_ARROW', 'HEAVY_BLEEDING'}, {}, {}, context.Target)
end

-- ==================================== Silenced/Deafened

function Goon_HasSilencedCondition()
    return HasAnyStatus({'SILENCED', 'SHA_SILENTLIBRARY_LIBRARIANSILENCE_STATUS', 'LOW_VoicelessPenitent_Silenced', 'SILENCED_MOVEMENT', 'GARROTE_SILENCED'}, {}, {}, context.Target)
end

function Goon_HasDeafenedCondition()
    return HasAnyStatus({'DEAFENED'}, {}, {}, context.Target)
end

function SavingThrow_SoundBased(ability, dc, advantage, disadvantage, target)
    local advantage = advantage or false
    local disadvantage = disadvantage or false
    local target = target or context.Target

    if not IsDeaf(target).Result then
        st = SavingThrow(ability, dc, advantage, disadvantage, target)
        return ConditionResult(st.Result,{},{},st.Chance)
    else
        return true
    end
end

-- ==================================== Fire shit - Is Karlach cooking?

function Goon_HasBurningCondition()
    return Goon_HasBurningCondition_Normal() | Goon_HasBurningCondition_Holy() | Goon_HasBurningCondition_Hell()
end

function Goon_HasBurningConditionOrTag_Normal()
    entity = entity or context.Target
    result = Goon_HasBurningCondition_Normal | Goon_IsKarlachCooking()
    return ConditionResult(result.Result, {ConditionError("IsNotOnFire")})
end

function Goon_HasBurningConditionOrTag()
    entity = entity or context.Target
    result = Goon_HasBurningConditionOrTag_Normal() | Goon_HasBurningCondition_Holy() | Goon_HasBurningCondition_Hell() | Goon_IsKarlachCooking()
    return ConditionResult(result.Result, {ConditionError("IsNotOnFire")})
end

function Goon_HasBurningCondition_Normal()
    return HasAnyStatus({'BURNING', 'BURNING_AZER', 'BURNING_LAVA', 'BURNING_TRAPWALL', 'FLAMING_SPHERE_AURA', 'FLAMING_SPHERE_AURA_3', 'FLAMING_SPHERE_AURA_4', 'FLAMING_SPHERE_AURA_5', 'FLAMING_SPHERE_AURA_6', 'FLAMING_SPHERE_AURA_7', 'FLAMING_SPHERE_AURA_8', 'FLAMING_SPHERE_AURA_9', 'FLAMING_SPHERE', 'FLAMING_SPHERE_3', 'FLAMING_SPHERE_4', 'FLAMING_SPHERE_5', 'FLAMING_SPHERE_6', 'FLAMING_SPHERE_7', 'FLAMING_SPHERE_8', 'FLAMING_SPHERE_9', 'HAV_MAG_INFERNAL_FIRE', 'LOW_HOH_BOAR_BURNING_DAMAGE', 'MAG_FIRE_HEAT', 'MAG_INFERNAL_BURNING', 'ORI_KARLACH_ENRAGE', 'ORI_KARLACH_INFERNAL_FURY', 'SEARING_SMITE', 'WILD_MAGIC_BURNING'}, {}, {}, context.Target)
end

function Goon_HasBurningCondition_Holy()
    return HasAnyStatus({'BURNING_HOLY'}, {}, {}, context.Target)
end

function Goon_HasBurningCondition_Hell()
    return HasAnyStatus({'BURNING_HELLFIRE'}, {}, {}, context.Target)
end

function Goon_IsKarlachCooking()
    return Tagged('REALLY_KARLACH', context.Target) & not Tagged('KARLACH_CAN_TOUCH', context.Target)
end

-- ==================================== Fetch character levels ====================================

function GoonCharacterLevelEqualTo(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level == value)
end

function GoonCharacterLevelEqualToOrGreaterThan(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level >= value)
end

-- ==================================== Check current duration of status ====================================

function Goon_StatusGroupDurationEqualTo(entity, stringStatusGroupName, number)
    local entity = entity or context.Target
    local number = number or 0
    return ConditionResult(math.floor(GetStatusDuration(stringStatusGroupName, entity)) == number)
end

-- ==================================== Spell batching ====================================
-- TODO: Hunt down everything relevant.

function Goon_IsSneakAttack(entity)
    entity = entity or context.Source
    return HasUseCosts('SneakAttack_Charge') | Goon_IsUACunningStrikeSneakAttack()
    | SpellId('Target_SneakAttack') | SpellId('Projectile_SneakAttack') | SpellId('Interrupt_SneakAttack') | SpellId('Interrupt_SneakAttack_Critical')
    | SpellId('Target_SneakAttack_Rakish') | SpellId('Projectile_SneakAttack_Rakish') | SpellId('Interrupt_SneakAttack_Rakish') | SpellId('Interrupt_SneakAttack_Rakish_Critical') 
    | SpellId('Target_SneakAttack_Swarm')
end

function Goon_IsUACunningStrikeSneakAttack(entity)
    entity = entity or context.Source
    return SpellId('Interrupt_DWE_SneakAttack') | SpellId('Interrupt_DWE_CunningStrike_Less1') | SpellId('Interrupt_DWE_CunningStrike_Less2') | SpellId('Interrupt_DWE_CunningStrike_Less3') | SpellId('Interrupt_DWE_CunningStrike_Less6') 
    | SpellId('Interrupt_DWE_CunningStrike_Disarm') | SpellId('Interrupt_DWE_CunningStrike_Poison') | SpellId('Interrupt_DWE_CunningStrike_Trip') | SpellId('Interrupt_DWE_CunningStrike_Withdraw') | SpellId('Interrupt_DWE_CunningStrike_Daze') | SpellId('Interrupt_DWE_CunningStrike_KnockOut') | SpellId('Interrupt_DWE_CunningStrike_Obscure')
end

function Goon_IsBardicInspirationSpell(entity)
    entity = entity or context.Source
    return SpellId('Target_BardicInspiration') | SpellId('Target_BardicInspiration_Combat') 
    | SpellId('Target_MantleOfInspiration') | SpellId('Target_MantleOfInspiration_2') | SpellId('Target_MantleOfInspiration_3')
end

function Goon_IsDisengageSpell(entity)
    entity = entity or context.Source
    return SpellId('Shout_Disengage') | SpellId('Shout_Disengage_BonusAction') | SpellId('Shout_Disengage_CunningAction') | SpellId('Shout_Disengage_StepOfTheWind') | SpellId('Shout_BootsOfSpeed') 
    | SpellId('SYR_Shout_Disengage_BonusAction_DruidQoL')
end

function Goon_HasDisengageCondition(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Disengage', 'DISENGAGE', 'DRUNKEN_TECHNIQUE', 'CLICK_HEELS'}, {}, {}, entity)
end

function Goon_HasDashStatus(entity)
    entity = entity or context.Source
    return HasAnyStatus({'DASH','DASH_STACKED','DASH_STACKED_2','GOON_DASH_STACKED_3','GOON_DASH_STACKED_4','GOON_DASH_STACKED_5','GOON_DASH_STACKED_6','GOON_DASH_STACKED_7','GOON_DASH_STACKED_8','GOON_DASH_STACKED_9'}, {}, {}, entity)
end

function Goon_IsJumpSpellCategory()
    return SpellCategoryIs(SpellCategory.Jump)
end

-- ==================================== Weapon enchant checks ====================================
-- TODO: Hunt down everything relevant.
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsIntelligenceModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source)))

function Goon_IsSpellcastingModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON'}, {}, {}, entity)
end

function Goon_IsIntelligenceModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({}, {}, {}, entity)
end

function Goon_IsWisdomModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SHILLELAGH', 'FourEle_Attuned'}, {}, {}, entity)
end

function Goon_IsCharismaModifierWeapon(entity)
    entity = entity or context.Source
    return HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE'}, {}, {}, entity)
end

-- ==================================== Tag piles ====================================
-- Mod support: FIREARM_MOD = Artificer

function Goon_IsWeapon(entity)
    entity = entity or context.Source
    return Goon_IsMeleeWeapon() | Goon_IsRangedWeapon()
end

function Goon_IsMeleeWeapon(entity)
    entity = entity or context.Source
    return Tagged('WPN_BATTLEAXE', entity)
    | Tagged('WPN_CLUB', entity)
    | Tagged('WPN_DAGGER', entity)
    | Tagged('WPN_DART', entity)
    | Tagged('WPN_FLAIL', entity)
    | Tagged('WPN_GLAIVE', entity)
    | Tagged('WPN_GREATAXE', entity)
    | Tagged('WPN_GREATSWORD', entity)
    | Tagged('WPN_HALBERD', entity)
    | Tagged('WPN_HANDAXE', entity)
    | Tagged('WPN_JAVELIN', entity)
    | Tagged('WPN_LIGHT_HAMMER', entity)
    | Tagged('WPN_LONGSWORD', entity)
    | Tagged('WPN_MACE', entity)
    | Tagged('WPN_MAUL', entity)
    | Tagged('WPN_MORNINGSTAR', entity)
    | Tagged('WPN_PIKE', entity)
    | Tagged('WPN_STAVE', entity)
    | Tagged('WPN_RAPIER', entity)
    | Tagged('WPN_SCIMITAR', entity)
    | Tagged('WPN_SHORTSWORD', entity)
    | Tagged('WPN_SICKLE', entity)
    | Tagged('WPN_SPEAR', entity)
    | Tagged('WPN_TRIDENT', entity)
    | Tagged('WPN_WAR_PICK', entity)
    | Tagged('WPN_WARHAMMER', entity)
end

function Goon_IsRangedWeapon(entity)
    entity = entity or context.Source
    return Tagged('WPN_HAND_CROSSBOW', entity)
    | Tagged('WPN_HEAVY_CROSSBOW', entity)
    | Tagged('WPN_LIGHT_CROSSBOW', entity)
    | Tagged('WPN_LONGBOW', entity)
    | Tagged('WPN_SHORTBOW', entity)
    | Tagged('WPN_SLING', entity)
    | Tagged('FIREARM_MOD', entity)
end

function Goon_IsThrownWeapon(entity)
    entity = entity or context.Source
    return HasWeaponProperty(WeaponProperties.Thrown, entity)
end

function Goon_IsAxe(entity)
    entity = entity or context.Source
    return Tagged('WPN_BATTLEAXE', entity)
    | Tagged('WPN_GREATAXE', entity)
    | Tagged('WPN_HANDAXE', entity)
end

function Goon_IsPolearm(entity)
    entity = entity or context.Source
    return Tagged('WPN_GLAIVE', entity)
    | Tagged('WPN_HALBERD', entity)
    | Tagged('WPN_JAVELIN', entity)
    | Tagged('WPN_PIKE', entity)
    | Tagged('WPN_STAVE', entity)
    | Tagged('WPN_SPEAR', entity)
    | Tagged('WPN_TRIDENT', entity)
end

function Goon_IsSword(entity)
    entity = entity or context.Source
    return Tagged('WPN_GREATSWORD', entity)
    | Tagged('WPN_LONGSWORD', entity)
    | Tagged('WPN_RAPIER', entity)
    | Tagged('WPN_SCIMITAR', entity)
    | Tagged('WPN_SHORTSWORD', entity)
end

function Goon_IsHammer(entity)
    entity = entity or context.Source
    return Tagged('WPN_LIGHT_HAMMER', entity)
    | Tagged('WPN_MAUL', entity)
    | Tagged('WPN_WARHAMMER', entity)
end

-- ==================================== Druid and Polymorph stuff ====================================
-- TODO: Hunt down everything relevant.
-- Check for any and all druid forms, only druid forms and not stinky disguise self etc. 
-- Mod support: Circle of Storm Chasers and the custom Circle of Stars.

function Goon_IsDruidWildshapeOrStatus(entity)
    entity = entity or context.Source
    return Goon_IsWildshapeDruidPolymorph() | Goon_IsMyrmidonDruidPolymorph() | Goon_IsHumanoidDruidPolymorph()
end

function Goon_IsDruidWildshape(entity)
    entity = entity or context.Source
    return Goon_IsWildshapeDruidPolymorph() | Goon_IsMyrmidonDruidPolymorph()
end

function Goon_IsUnrestrictedPolymorphStatus(entity)
    entity = entity or context.Source
    return Goon_IsHumanoidDruidPolymorph() | Goon_IsOtherPolymorph()
end

-- TODO: Need to sort out Immutable Form so it doesn't block non-hostile Polymorphs
function Goon_IsNonHostilePolymorphStatus(entity)
    entity = entity or context.Source
    return not Tagged('POLYMORPHED_UNWILLING', entity) & Goon_IsWildshapeDruidPolymorph()
    | not Tagged('POLYMORPHED_UNWILLING', entity) & Goon_IsMyrmidonDruidPolymorph()
    | not Tagged('POLYMORPHED_UNWILLING', entity) & Goon_IsHumanoidDruidPolymorph()
    | not Tagged('POLYMORPHED_UNWILLING', entity) & Goon_IsOtherPolymorph()
end

-- ==================================== Polymorph clusters

function Goon_IsWildshapeDruidPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Polymorph_BeastShape'}, {}, {}, entity)
end

function Goon_IsMyrmidonDruidPolymorph(entity)
    entity = entity or context.Source
    return HasStatus('SG_Polymorph', context.Source) & Tagged('MYRMIDON_AIR', entity) 
    | HasStatus('SG_Polymorph', context.Source) & Tagged('MYRMIDON_EARTH', entity) 
    | HasStatus('SG_Polymorph', context.Source) & Tagged('MYRMIDON_FIRE', entity) 
    | HasStatus('SG_Polymorph', context.Source) & Tagged('MYRMIDON_WATER', entity) 
end

function Goon_IsHumanoidDruidPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'WILDSHAPE_STARRY_ARCHER_PLAYER', 'WILDSHAPE_STARRY_CHALICE_PLAYER', 'WILDSHAPE_STARRY_DRAGON_PLAYER', 'STARRY_FORM_ARCHER', 'STARRY_FORM_CHALICE', 'STARRY_FORM_DRAGON', 'STORM_SHIFTER'}, {}, {}, entity)
end

function Goon_IsOtherPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Disguise', 'SG_Doppelganger'}, {}, {}, entity) | Tagged('MINDFLAYER', entity)
end