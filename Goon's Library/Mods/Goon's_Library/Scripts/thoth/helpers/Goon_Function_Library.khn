-- ==================================== VANILLA OVERWRITES ====================================

-- Add more technicals from entries using this function to negate niche, yet redundant saving throws from occuring
function WallOfFireCheck(ability, dc, result)
    result = result or false
    hasStatus =  HasAnyStatus({'WALLOFFIRE_DAMAGE_RECEIVED', 'WALLOFFIRE_DAMAGE_RECEIVED_5', 'WALLOFFIRE_DAMAGE_RECEIVED_6', 'WALLOFFIRE_DAMAGE_RECEIVED_7', 'WALLOFFIRE_DAMAGE_RECEIVED_8', 'WALLOFFIRE_DAMAGE_RECEIVED_9','MYSTIC_WALLOFREPULSION_EFFECT_RECEIVED',}, {}, {}, entity)
    if not hasStatus.Result then
        st = ~SavingThrow(ability, dc)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(result)
end

-- TODO: Test attacking bodies and shit. If that's triggering it, try 'not dead', maybe the function will fire before they are considered dead.
-- Added what appears to be a common solution for making the function more predictably fire
function IsKillingBlow()
    return HasDamageEffectFlag(DamageFlags.KillingBlow) | HasHPLessThan(1)
end

-- ==================================== STATUS GROUPINGS ====================================

-- ==================================== Bleeding

function Goon_HasBleedingCondition()
    return HasAnyStatus({'BLEEDING', 'BARBED_ARROW', 'HEAVY_BLEEDING'}, {}, {})
end

-- ==================================== Silenced/Deafened

function Goon_HasSilencedCondition()
    return HasAnyStatus({'SILENCED', 'SHA_SILENTLIBRARY_LIBRARIANSILENCE_STATUS', 'LOW_VoicelessPenitent_Silenced', 'SILENCED_MOVEMENT', 'GARROTE_SILENCED'}, {}, {})
end

function Goon_HasDeafenedCondition()
    return HasAnyStatus({'DEAFENED'}, {}, {})
end

function SavingThrow_SoundBased(ability, dc, advantage, disadvantage, target)
    local advantage = advantage or false
    local disadvantage = disadvantage or false
    local target = target or context.Target

    if not IsDeaf(target).Result then
        st = SavingThrow(ability, dc, advantage, disadvantage, target)
        return ConditionResult(st.Result,{},{},st.Chance)
    else
        return true
    end
end

-- ==================================== DIPPPPPPPPPPPPP

function Goon_IsDippableSurface()
    result = Surface('SurfaceFire') | Surface('SurfaceHellfire') | Surface('SurfacePoison') | Surface('SurfaceWater') | Surface('SurfaceSerpentVenom') | Surface('SurfaceWyvernPoison') | Surface('SurfacePurpleWormPoison')
    return ConditionResult(result.Result, {ConditionError("Goon_IsNotDippableSurfaceOrEntity")})
end

-- ==================================== Fire shit - Is Karlach cooking?

function Goon_HasBurningCondition()
    result = Goon_HasBurningCondition_Normal() | Goon_HasBurningCondition_Holy() | Goon_HasBurningCondition_Hell()
    return ConditionResult(result.Result, {ConditionError("IsNotOnFire")})
end

function Goon_HasBurningConditionOrTag_Normal()
    result = Goon_HasBurningCondition_Normal() | Goon_IsKarlachCooking()
    return ConditionResult(result.Result, {ConditionError("IsNotOnFire")})
end

function Goon_HasBurningConditionOrTag()
    result = Goon_HasBurningCondition_Normal() | Goon_IsKarlachCooking() | Goon_HasBurningCondition_Holy() | Goon_HasBurningCondition_Hell()
    return ConditionResult(result.Result, {ConditionError("IsNotOnFire")})
end

-- ==================================== List functions

function Goon_HasBurningCondition_Normal()
    return HasAnyStatus({'BURNING', 'BURNING_AZER', 'BURNING_LAVA', 'BURNING_TRAPWALL', 'FLAMING_SPHERE_AURA', 'FLAMING_SPHERE_AURA_3', 'FLAMING_SPHERE_AURA_4', 'FLAMING_SPHERE_AURA_5', 'FLAMING_SPHERE_AURA_6', 'FLAMING_SPHERE_AURA_7', 'FLAMING_SPHERE_AURA_8', 'FLAMING_SPHERE_AURA_9', 'FLAMING_SPHERE', 'FLAMING_SPHERE_3', 'FLAMING_SPHERE_4', 'FLAMING_SPHERE_5', 'FLAMING_SPHERE_6', 'FLAMING_SPHERE_7', 'FLAMING_SPHERE_8', 'FLAMING_SPHERE_9', 'HAV_MAG_INFERNAL_FIRE', 'LOW_HOH_BOAR_BURNING_DAMAGE', 'MAG_FIRE_HEAT', 'MAG_INFERNAL_BURNING', 'ORI_KARLACH_ENRAGE', 'ORI_KARLACH_INFERNAL_FURY', 'SEARING_SMITE', 'WILD_MAGIC_BURNING'}, {}, {})
end

function Goon_HasBurningCondition_Holy()
    return HasAnyStatus({'BURNING_HOLY'}, {}, {})
end

function Goon_HasBurningCondition_Hell()
    return HasAnyStatus({'BURNING_HELLFIRE'}, {}, {})
end

function Goon_IsKarlachCooking()
    return Tagged('REALLY_KARLACH') & ~Tagged('KARLACH_CAN_TOUCH')
end

-- ==================================== Fetch character levels ====================================

function GoonCharacterLevelEqualTo(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level == value)
end

function GoonCharacterLevelEqualToOrGreaterThan(value, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Level >= value)
end

-- ==================================== Check current duration of status ====================================

function Goon_StatusGroupDurationEqualTo(entity, stringStatusGroupName, number)
    local entity = entity or context.Target
    local number = number or 0
    return ConditionResult(math.floor(GetStatusDuration(stringStatusGroupName, entity)) == number)
end

-- ==================================== Spell batching ====================================
-- TODO: Hunt down everything relevant.

-- ==================================== Sneak Attacks

function Goon_IsSneakAttackSpell()
	return SpellId('Target_SneakAttack')
		 | SpellId('Projectile_SneakAttack')
		 | SpellId('Target_SneakAttack_Rakish')
		 | SpellId('Projectile_SneakAttack_Rakish')
         | SpellId('Target_SneakAttack_Swarm')
end

function Goon_IsSneakAttack()
    return HasUseCosts('SneakAttack_Charge') 
         | Goon_IsUACunningStrikeSneakAttack()
         | SpellId('Target_SneakAttack') 
         | SpellId('Projectile_SneakAttack') 
         | SpellId('Interrupt_SneakAttack') 
         | SpellId('Interrupt_SneakAttack_Critical')
         | SpellId('Target_SneakAttack_Rakish') 
         | SpellId('Projectile_SneakAttack_Rakish') 
         | SpellId('Interrupt_SneakAttack_Rakish') 
         | SpellId('Interrupt_SneakAttack_Rakish_Critical') 
         | SpellId('Target_SneakAttack_Swarm')
end

function Goon_IsUACunningStrikeSneakAttack()
    return SpellId('Interrupt_DWE_SneakAttack')
         | SpellId('Interrupt_DWE_CunningStrike_Less1') 
         | SpellId('Interrupt_DWE_CunningStrike_Less2') 
         | SpellId('Interrupt_DWE_CunningStrike_Less3') 
         | SpellId('Interrupt_DWE_CunningStrike_Less6') 
         | SpellId('Interrupt_DWE_CunningStrike_Disarm') 
         | SpellId('Interrupt_DWE_CunningStrike_Poison') 
         | SpellId('Interrupt_DWE_CunningStrike_Trip') 
         | SpellId('Interrupt_DWE_CunningStrike_Withdraw') 
         | SpellId('Interrupt_DWE_CunningStrike_Daze') 
         | SpellId('Interrupt_DWE_CunningStrike_KnockOut') 
         | SpellId('Interrupt_DWE_CunningStrike_Obscure')
end

-- ==================================== Flourishes

-- TODO: Fill this out with the custom reactions and temporary spells!
function Goon_IsFlourish()
    return Goon_IsFlourishSpell() 
         | Goon_IsFlourishTemporarySpell() 
         | Goon_IsFlourishInterrupt()
end

function Goon_IsFlourishSpell()
    return SpellId('Target_BladeFlourish_Defensive')
         | SpellId('Projectile_BladeFlourish_Defensive')
         | SpellId('Target_BladeFlourish_Mobile')
         | SpellId('Projectile_BladeFlourish_Mobile')
         | SpellId('Zone_BladeFlourish_Slashing')
         | SpellId('Projectile_BladeFlourish_Slashing')
end

function Goon_IsFlourishTemporarySpell()
    return SpellId('Goon_Target_BladeFlourish_Defensive_Temporary')
         | SpellId('Goon_Projectile_BladeFlourish_Defensive_Temporary')
         | SpellId('Goon_Target_BladeFlourish_Mobile_Temporary')
         | SpellId('Goon_Projectile_BladeFlourish_Mobile_Temporary')
         | SpellId('Goon_Target_BladeFlourish_Slashing_Temporary')
         | SpellId('Goon_Projectile_BladeFlourish_Slashing_Temporary')
         | SpellId('Goon_Throw_BladeFlourish_Slashing_Temporary')
end

function Goon_IsFlourishInterrupt()
    return SpellId('Goon_Interrupt_BladeFlourish_Defensive')
         | SpellId('Goon_Interrupt_BladeFlourish_Mobile')
         | SpellId('Goon_Interrupt_BladeFlourish_Slashing')
end

-- ==================================== Bardic Inspiration

function Goon_IsBardicInspirationSpell()
    return SpellId('Target_BardicInspiration') 
         | SpellId('Target_BardicInspiration_Combat') 
         | SpellId('Target_MantleOfInspiration') 
         | SpellId('Target_MantleOfInspiration_2') 
         | SpellId('Target_MantleOfInspiration_3')
end

-- ==================================== Sorcerer stuff

function Goon_IsCreateSorceryPoints()
    return SpellId('Shout_CreateSorceryPoints_1') 
         | SpellId('Shout_CreateSorceryPoints_2') 
         | SpellId('Shout_CreateSorceryPoints_3') 
         | SpellId('Shout_CreateSorceryPoints_4') 
         | SpellId('Shout_CreateSorceryPoints_5') 
         | SpellId('Shout_CreateSorceryPoints_6') 
         | SpellId('Shout_CreateSorceryPoints_7') 
         | SpellId('Shout_CreateSorceryPoints_8') 
         | SpellId('Shout_CreateSorceryPoints_9') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_1') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_2') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_3') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_4') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_5') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_6') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_7') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_8') 
         | SpellId('Goon_Shout_CreateSorceryPoints_Warlock_9') 
end

-- ==================================== Common Actions

function Goon_IsDisengageSpell()
    return SpellId('Shout_Disengage') 
         | SpellId('Shout_Disengage_BonusAction') 
         | SpellId('Shout_Disengage_CunningAction') 
         | SpellId('Shout_Disengage_StepOfTheWind') 
         | SpellId('Shout_BootsOfSpeed') 
         | SpellId('SYR_Shout_Disengage_BonusAction_DruidQoL')
end

function Goon_HasDisengageCondition()
    return HasAnyStatus({'SG_Disengage', 'DISENGAGE', 'DRUNKEN_TECHNIQUE', 'CLICK_HEELS'}, {}, {})
end

function Goon_HasDashStatus()
    return HasAnyStatus({'DASH','DASH_STACKED','DASH_STACKED_2','GOON_DASH_STACKED_3','GOON_DASH_STACKED_4','GOON_DASH_STACKED_5','GOON_DASH_STACKED_6','GOON_DASH_STACKED_7','GOON_DASH_STACKED_8','GOON_DASH_STACKED_9'}, {}, {})
end

function Goon_IsJumpSpellCategory()
    return SpellCategoryIs(SpellCategory.Jump)
end

-- ==================================== Weapon enchant checks ====================================
-- TODO: Hunt down everything relevant.
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsIntelligenceModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source)))
-- IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source)))

function Goon_IsSpellcastingModifierWeapon()
    return HasAnyStatus({'MAG_MELEE_CASTER_BOON', 'LHB_SEL_TASHASOTHERWORLDLYGUISE_MAGICWEAPON'}, {}, {})
end

function Goon_IsIntelligenceModifierWeapon()
    return HasAnyStatus({}, {}, {})
end

function Goon_IsWisdomModifierWeapon()
    return HasAnyStatus({'SHILLELAGH', 'FourEle_Attuned'}, {}, {})
end

function Goon_IsCharismaModifierWeapon()
    return HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE'}, {}, {})
end

-- ==================================== Tag piles ====================================
-- Mod support: FIREARM_MOD = Artificer
-- NOTE: These will not work for boosts using context.HitDescription.ThrownObject. But maybe declaring that context in the functions themselves will work.
-- HasAnyTags only works in stats and not khn, but unlike Tagged it works with context.HitDescription.ThrownObject, despite only having one use case in the whole fucking game.

function Goon_IsWeapon()
    return Goon_IsMeleeWeapon() 
         | Goon_IsRangedWeapon()
end

-- Just use HasWeaponProperty(WeaponProperties.Melee, context.HitDescription.ThrownObject) instead
function Goon_IsMeleeWeapon()
    return Tagged('WPN_BATTLEAXE') 
         | Tagged('WPN_CLUB') 
         | Tagged('WPN_DAGGER') 
         | Tagged('WPN_DART') 
         | Tagged('WPN_FLAIL') 
         | Tagged('WPN_GLAIVE') 
         | Tagged('WPN_GREATAXE') 
         | Tagged('WPN_GREATSWORD') 
         | Tagged('WPN_HALBERD') 
         | Tagged('WPN_HANDAXE') 
         | Tagged('WPN_JAVELIN') 
         | Tagged('WPN_LIGHT_HAMMER') 
         | Tagged('WPN_LONGSWORD') 
         | Tagged('WPN_MACE') 
         | Tagged('WPN_MAUL') 
         | Tagged('WPN_MORNINGSTAR') 
         | Tagged('WPN_PIKE') 
         | Tagged('WPN_STAVE') 
         | Tagged('WPN_RAPIER') 
         | Tagged('WPN_SCIMITAR') 
         | Tagged('WPN_SHORTSWORD') 
         | Tagged('WPN_SICKLE') 
         | Tagged('WPN_SPEAR') 
         | Tagged('WPN_TRIDENT') 
         | Tagged('WPN_WAR_PICK') 
         | Tagged('WPN_WARHAMMER')
end

-- Just use HasWeaponProperty(WeaponProperties.Ammunition, context.HitDescription.ThrownObject) instead
function Goon_IsRangedWeapon()
    return Tagged('WPN_HAND_CROSSBOW') 
         | Tagged('WPN_HEAVY_CROSSBOW') 
         | Tagged('WPN_LIGHT_CROSSBOW') 
         | Tagged('WPN_LONGBOW') 
         | Tagged('WPN_SHORTBOW') 
         | Tagged('WPN_SLING') 
         | Tagged('FIREARM_MOD')
end

function Goon_IsThrownWeapon()
    return HasWeaponProperty(WeaponProperties.Thrown)
end

function Goon_IsAxe()
    return Tagged('WPN_BATTLEAXE') 
         | Tagged('WPN_GREATAXE') 
         | Tagged('WPN_HANDAXE')
end

function Goon_IsPolearm()
    return Tagged('WPN_GLAIVE') 
         | Tagged('WPN_HALBERD') 
         | Tagged('WPN_JAVELIN') 
         | Tagged('WPN_PIKE') 
         | Tagged('WPN_STAVE') 
         | Tagged('WPN_SPEAR') 
         | Tagged('WPN_TRIDENT')
end

function Goon_IsSword()
    return Tagged('WPN_GREATSWORD') 
         | Tagged('WPN_LONGSWORD') 
         | Tagged('WPN_RAPIER') 
         | Tagged('WPN_SCIMITAR') 
         | Tagged('WPN_SHORTSWORD')
end

function Goon_IsHammer()
    return Tagged('WPN_LIGHT_HAMMER') 
         | Tagged('WPN_MAUL') 
         | Tagged('WPN_WARHAMMER')
end

-- ==================================== Druid and Polymorph stuff ====================================

function Goon_HasUnbrokenOath()
    result = ~Tagged('OATHBREAKER', context.Source)
    return ConditionResult(result.Result, {ConditionError("Goon_HasBrokenOath")})
end

-- ==================================== Druid and Polymorph stuff ====================================
-- TODO: Hunt down everything relevant.
-- Check for any and all druid forms, only druid forms and not stinky disguise self etc. 
-- Mod support: Circle of Storm Chasers and the custom Circle of Stars.
-- TODO: Maybe remove declaring entities and leave it blank like condition status checks above.

function Goon_IsDruidWildshapeOrStatus(entity)
    entity = entity or context.Source
    return Goon_IsWildshapeDruidPolymorph() | Goon_IsMyrmidonDruidPolymorph() | Goon_IsHumanoidDruidPolymorph()
end

function Goon_IsDruidWildshape(entity)
    entity = entity or context.Source
    return Goon_IsWildshapeDruidPolymorph() | Goon_IsMyrmidonDruidPolymorph()
end

function Goon_IsUnrestrictedPolymorphStatus(entity)
    entity = entity or context.Source
    return Goon_IsHumanoidDruidPolymorph() | Goon_IsOtherPolymorph()
end

-- TODO: Need to sort out Immutable Form so it doesn't block non-hostile Polymorphs
function Goon_IsNonHostilePolymorphStatus(entity)
    entity = entity or context.Source
    return ~Tagged('POLYMORPHED_UNWILLING', entity) & (Goon_IsWildshapeDruidPolymorph() | Goon_IsMyrmidonDruidPolymorph() | Goon_IsHumanoidDruidPolymorph() | Goon_IsOtherPolymorph() | Tagged('SLAYER', entity))
end

-- ==================================== Polymorph clusters

function Goon_IsWildshapeDruidPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Polymorph_BeastShape'}, {}, {}, entity)
end

function Goon_IsMyrmidonDruidPolymorph(entity)
    entity = entity or context.Source
    return HasStatus('SG_Polymorph', entity) & (Tagged('MYRMIDON_AIR', entity) | Tagged('MYRMIDON_EARTH', entity) | Tagged('MYRMIDON_FIRE', entity) | Tagged('MYRMIDON_WATER', entity)) 
end

function Goon_IsHumanoidDruidPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'WILDSHAPE_STARRY_ARCHER_PLAYER', 'WILDSHAPE_STARRY_CHALICE_PLAYER', 'WILDSHAPE_STARRY_DRAGON_PLAYER', 'STARRY_FORM_ARCHER', 'STARRY_FORM_CHALICE', 'STARRY_FORM_DRAGON', 'STORM_SHIFTER'}, {}, {}, entity)
end

function Goon_IsOtherPolymorph(entity)
    entity = entity or context.Source
    return HasAnyStatus({'SG_Disguise', 'SG_Doppelganger'}, {}, {}, entity) | Tagged('MINDFLAYER', entity)
end

-- ==================================== Surface check stuff ====================================

function Goon_CreateSurfaceSpellCheck(entity)
    entity = entity or context.Source
    return ~HasStatus('GOON_SURFACE_CHECK', entity) | HasStatus('GOON_ITEMORDEAD_CHECK', entity)
end

function Goon_IsItemOrDead(entity)
    entity = entity or context.Target
    return Item(entity) | Dead(entity)
end

-- ==================================== Junk ====================================

-- TODO: Knife of the Undermountain King and probably others
function Goon_IsShadowBlade()
    return HasAnyStatus({'SHADOWBLADE_TECHNICAL', '', 'GOON_JUSTICIARSSCIMITAR_WEAPON_TECHNICAL'}, {}, {})
end

-- TODO: Yeah this no work
function Goon_IsPassiveSourceWeapon()
    local MeleeMainHand = GetItemInEquipmentSlot(EquipmentSlot.MeleeMainHand)
    local MeleeOffHand = GetItemInEquipmentSlot(EquipmentSlot.MeleeOffHand)
    local RangedMainHand = GetItemInEquipmentSlot(EquipmentSlot.RangedMainHand)
    local RangedOffHand = GetItemInEquipmentSlot(EquipmentSlot.RangedOffHand)

    local result = false

    if MeleeMainHand.IsValid then
        result = result | IsPassiveSource(context.Passive, MeleeMainHand, context.Source)
                        | IsPassiveOwner(context.Passive, MeleeMainHand, context.Source)
    end

    if MeleeOffHand.IsValid then
        result = result |IsPassiveSource(context.Passive, MeleeOffHand, context.Source)
                        | IsPassiveOwner(context.Passive, MeleeOffHand, context.Source)
    end

    if RangedMainHand.IsValid then
        result = result | IsPassiveSource(context.Passive, RangedMainHand, context.Source)
                        | IsPassiveOwner(context.Passive, RangedMainHand, context.Source)
    end

    if RangedOffHand.IsValid then
        result = result | IsPassiveSource(context.Passive, RangedOffHand, context.Source)
                        | IsPassiveOwner(context.Passive, RangedOffHand, context.Source)
    end

    return result
end